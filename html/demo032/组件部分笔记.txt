组件注册：
1.当一个自定义组件使用在html中,即直接使用在html中的dom节点下时，建议使用字母全小写，并最少包含一个连接符，如果使用在字符串模板中或者.vue文件中时没有约束。
2.组件命名的时候，如果使用短横线命名方式时，在DOM元素下使用则需要使用短横线方式；如果组件命名以驼峰命名，则在DOM元素下使用也需要使用短横线命名方式，但是在字符串模板或者.vue中使用则没有限制。
3.全局注册：
Vue.component('component-name',{});
它们在注册之后可以用在任何新建的Vue根实例的模板中。
例：
Vue.component('component-a',{});
Vue.component('component-b',{});
Vue.component('component-c',{});
<div id="app">
<component-a></component-a>
<component-b></component-b>
<component-c></component-c>
</div>
4.局部注册：
全局注册时，如果组件没有被使用则也会被加载，所以为了减少javascript的大小，则可以使用局部注册。
var componentA = {};
var componentB = {};
var componentC = {};
var vm = new Vue({
    el:'#app',
    components:{
        'component-a':componentA,
        'component-b':componentB,
        'component-c':componentC
    }
});
对于components对象中的每个属性来说，其属性名就是自定义元素的名字，其属性值就是这个组件的选项对象。
注意：
一个实例对象局部注册的组件在其子组件中不可用，即上述例子中，如果想要在componentA中使用componentB则按照下面的方式使用，即在A中局部注册B：
var componentA = {
    components:{
        'component-b':componentB
    }
};
或者通过ES6的特性来从A的vue文件中引入组件B来使用
import ComponentB from './componentB.vue';
export default {
    components:{
        //ComponentB其实相当于ComponentB:ComponentB,这个变量名同时是用在模板中的自定义元素的名字；也包含了这个组件选项的变量名。
        ComponentB
    }
}
5.基础组件的常规使用，导致每个文件中都会有一个基础组件使用列表
ipmort BaseComponentA from ./componentA.vue;
ipmort BaseComponentB from ./componentB.vue;

export default{
    components:{
        BaseComponentA,
        BaseComponentB
    }
}
解决办法：
    如果使用webpack的时候可以在主文件中将基本组件全都引入；注册组件需要在new Vue 之前进行。
    import Vue from '/vue';
    import upperFirst from 'lodash/upperFirst';
    import camelCase from 'lodash/camelCase';

    const requireComponent = require.context(
        //指定组件所在文件夹
        './components',
        //是否进行子目录搜索
        false,
        //匹配基础文件名的正则表达式
        /Base[A-Z]\w+\.(vue|js)$/
    );
    requireComponent.keys().forEach(fileName => {
        //获取组件配置
        const componentConfig = requireComponent(fileName);
        //获取组件的PascalCase命名
        const componentName = upperFirst(
            camelCase(
                fileName.replace(/^\.\/(.*)\.\w+$/,'$1');
            )
        );
        //全局注册组件
        Vue.component(componentName,
                        //如果这个组件通过 export default导出的
                        //那么就会优先使用.default
                        //否则就会退回到使用模板的根
                        componentConfig.default||componentConfig);
    });
组件Prop属性：
1.Prop使用时成为html特性。
2.如在html里面的DOM元素里使用Prop，因特性名是不区分大小写的，因此，Prop中使用驼峰命名时，DOM元素中应该使用短横线分隔形式，但如果在字符串模板中即两个反引号··，中使用特性则不需要这个区别。
    例：
        Vue.component('blog-post',{
            props:['postTitle']
        });
        <blog-post post-title=""></blog-post>
        `<blog-post postTitle=""></blog-post>`
3.prop类型，为了给每个特性指定不同的类型，可以给prop属性赋值一个对象，该对象的名表示特性的名字，值表示特性对象的类型。
    例:
        Vue.component('blog-post',{
            props:{
                title:String,
                likes:Number,
                isPublished:Boolean,
                commentIds:Array,
                author:Object
            }
        });
4.给prop指定的特性赋值：动态或静态(任何类型的值都可以传给prop)
    例：
        静态：
            <blog-post title="This is Title!"></blog-post>
        动态：
            <blog-post v-bind:title="post.title"></blog-post>
            <blog-post v-bind:title="This +' '+is+' '+Title!"></blog-post>
    除了字符串以外可以是用静态传值，其他类型应使用动态传值：
        例： 一个数字
            //这是一个 JavaScript 表达式而不是一个字符串
            <blog-post v-bind:likes="42"></blog-post>
            一个布尔值的传递
            //包含prop没有值的情况在内都意味着 true
            <blog-post is-published></blog-post>
            //即便是false是一个静态的，单也要使用v-bind来进行赋值
            <blog-post v-bind:is-published="false"></blog-post>
            <blog-post v-bind:is-published="post.isPublished"></blog-post>
            一个数组
            //即便数组是静态的，我们仍需要v-bind来告诉Vue 这是一个JavaScript表达式而不是一个字符串
            <blog-post v-bind:comment-ids="[234,266,277]"></blog-post>
            <blog-post v-bind:comment-ids="post.commentIds"></blog-post>
            一个对象
            //即便这个对象是静态的，我们仍需要v-bind来告诉Vue 这是一个JavaScript表达式而不是一个字符串
            <blog-post v-bind:author="{name:'Veronica',company:'Veronica Dynamic'}"></blog-post>
            //用一个变量动态赋值
            <blog-post v-bind:author="post.author"></blog-post>
5.传入一个对象的所有属性，如果想要将一个对象的所有属性作为prop传入的话，可以使用不带特性名的v-bind:
    例：
        对象：
            post : {
                title:'Title',
                id:1
            }
        传入：
            <blog-post v-bind="post"></blog-post>
        等价于：
            <blog-post v-bind:id="post.id" v-bind:title="post.title"></blog-post>
6.所有的prop都使得其父子prop之间形成了一个单向下行绑定：父级prop的更新会向下流动到子组件中，但是反过来则不行。即单向数据流。
因父组件中对象和数组传递到子组件中则为引用传递，所以父组件中的数据改变则会反映到子组件中。
这意味着不应该在一个子组件中的内部改变prop。
例：两种视图改变一个prop的情形：
    1.这个prop用来传递一个初始值；这个子组件接下来希望将其作为一个本地的prop数据来使用。这种情况下，最好定义一个本地的data属性，并将这个prop用作初始值：
        props:['initialCounter'],
        data:function(){
            return {
                counter:this.initialCounter
            }
        }
    2.这个prop以一种原始的值传入且需要进行转换。这种情况下，最好使用这个prop的值来定义一个计算属性：
        props:['size'],
        computed:{
            normalizedSize:function(){
                return this.size.trim().toLowerCase()
            }
        }
7.prop验证规则：在开发一个会被别人用到的组件时，我们可以为组件的prop指定验证要求，例如你知道的这些类型，如果有一个需求没有被满足，则Vue会在浏览器中控制台中警告你。
当prop验证失败的时候，（开发环境构建版本的）Vue将会产生一个控制台的警告。
注意：prop会在一个组件实例之前进行验证，所以实例的属性（如：data、computed等）在default或validator函数中是不可用的。
    例：
        Vue.component('my-component',{
            props:{
                propA:Number,//基础类型的检查 注意（null匹配所有类型）
                propB:[String,Number],//多个可能的类型
                propC:{
                    type:String,
                    required:true//必填项
                },
                propD:{
                    type:Number,
                    default:100//默认值
                },
                propE:{
                    type:Object,
                    default:function(){
                        //对象或者数组的默认值必须从一个工厂函数获取，工厂函数可以理解为返回对象的函数
                        return {message:'hello'}
                    }
                },
                propF：{
                    validator:function(value){
                        //自定义验证函数，这个是必须匹配下列字符串中的一个
                        return ['success','warning','danger'].indexOf(value)!==-1
                    }
                }
            }
        });
type类型：
    String\Number\Boolean\Object\Date\Array\Function\Symbol
    额外的，type还可以是一个自定义的构造函数，并且通过instanceof来进行检查确认，
        例：
            构造函数：
                function Person(firstName,lastName){
                    this.firstName = firstName;
                    this.lastName = lastName;
                }
            type使用：
                Vue.component('my-component',{
                    props:{
                        //验证author的值是否通过Person来创建
                        author:Person
                    }
                });
8.非Prop特性，即未在组件的prop中定义该特性，但是使用时使用到了该特性。
此时，如果使用了prop中未定义的特性，则该特性会被添加到该组件的根元素中。
例：
    Vue.component('my-component',{
        props:[],
        template:`<label><input /></label>`
    });
    <my-component data-date-picker="activated"></my-component>
    即：data-date-picker="activated"将会添加到my-component组件的根元素上，即label上
9.prop特性的替换/合并已有的特性（特性的继承）
例：
    <bootstrap-data-input></bootstrap-data-input>
    的模板为：
    <input type='date' class='form-control' />此input为组件的根元素
    使用时：
    <bootstrap-data-input class='date-picker-theme-dark' data-date-picker='activated'></bootstrap-data-input>
    按理说如果使用时自定义组中使用特性type='text'会将type='date'替换掉，但是对于class和style来说，默认情况下将会合并，即：
    <input class='form-control date-picker-theme-dark' />
10.禁止特性继承
如果你不希望组件的根元素继承特性，你可以在组件的选项中进行设置inheritAttrs:false。
例：
    Vue.component('my-component',{
        inheritAttrs:false,
        //...
    });
11.$attr和inheritAttrs:false 配合使用
    例：
    var component = {
        inheritAttrs:false,
        props: ['label', 'value','className'],
        template: ` <label>
                    {{label}}
                    <input v-bind:class="className" v-bind="$attrs"  v-on:input="$emit('input',$event.target.value)" v-bind:value="value" >
                    </label>`
    };

    var vm = new Vue({
        el: '#app',
        components: {
            'my-component': component
        },
        data:{
            componentClass:{
                class:'username-input',
                placeholder:'Enter your username'
            },
            label:'Username ',
            value:''
        }
    });
    <div id="app">
        <my-component v-bind:label="label" v-bind:class-name="'username-input'" v-model="value" placeholder="Enter username"></my-component>
    </div>


自定义事件：
1.命名：推荐使用短横线分隔命名，不同于组件和prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。
例：
    this.$emit('myEvent');
    则监听这个名字的短横线方法是不会有任何效果的：
    <my-component v-on:my-event='doSomething'></my-component>
2.自定义组件的v-model
一个组件上的v-model会利用value属性和input事件来完成，但是像单选框、复选框等类型的输入控件可能会将value特性用于不同目的。
所以使用model来避免这样的冲突：
    例：
    Vue.component('my-component',{
        model:{
            prop:'checked',//注意这里设置之后，仍然需要在props中进行声明
            event:'change'
        },
        props:{
            checked:Boolean
        },
        template:`<input type="checkbox" v-bind:checked='checked' v-on:change='$emit('change',$event.target.checked)'></input>`
    });
3.监听自定义组件的事件：
例：
    <div id="app">
        <!--<base-input v-bind:label="label" v-model="label" v-on:focus.native="onFocus" ></base-input>复杂template的时候.native失效-->
        <base-input v-bind:label="label" v-model="label"  v-on:focus="onFocus" ></base-input>
    </div>
    Vue.component('base-input',{
        inheritAttrs:false,
        props:['value','label'],
        template:`<label>{{label}}<input v-bind:value="value" v-on="inputListeners"/></label>`,
        computed:{
            inputListeners:function(){
                var vm = this;
                return Object.assign({},this.$listeners,{
                    input:function(event){
                        return vm.$emit('input',event.target.value);
                    }
                })
            }
        }
    });
    var vm = new Vue({
        el: '#app',
        components: {
            'my-component': component
        },
        data:{
            componentClass:{
                class:'username-input',
                placeholder:'Enter your username'
            },
            label:'Username ',
            value:''
        },
        methods:{
            onFocus:function(event){
                event.preventDefault();
                alert('focus');
            },

        }
    });
4..sync修饰符，用于双向数据绑定，
例：
    <div id="app-1">
        <label>{{data1.title}}</label>
        //双向数据绑定建议使用update:myPropName的模式触发时间取而代之。
        <!--<text-document v-bind:title="title" v-on:update:title="title = $event"></text-document>-->
        //为了方便起见，我们可以使用.sync来修饰。
        <!--<text-document v-bind:title="title" v-bind:title.sync="title = $event"></text-document>.sync和v-bind使用的时候=号后面不能是表达式-->
        <!--<text-document v-bind:title.sync="title"></text-document>对象或者属性来赋值，类似于model-->
        //可以将父组件中的对象和子组件进行双向绑定，同理，对于对象来说v-bind.sync="{}"也是无效的。
        <text-document v-bind.sync="data1"></text-document>
    </div>
    Vue.component('text-document',{
        props:['title'],
        template:`<input v-bind:value='title' v-on:input="$emit('update:title',$event.target.value)"/></div>`
    });

    var vm = new Vue({
        el:'#app-1',
        data:{
            title:'title',
            data1:{
                title:'1'
            },

        }
    });
插槽：
1.插槽内容：插槽内容可以是任何末班代码，包括HTML，也可以添加自定义组件
例：
    <div id="example-slot">
        //如果不添加<slot>插槽，则标签之间的内容会被抛弃
        <navigation-link>111<input /></navigation-link>
    </div>

    Vue.component('navigation-link',{
        template:`<label><slot></slot></label>`
    });

    var vm = new Vue({
        el:'#example-slot'
    });
2.具名插槽
有时候我们需要多个插槽。
    例：
        <div class="container">
            <header>页头</header>
            <main>内容</main>
            <footer>页脚</footer>
        </div>
    对于这样的情况，<slot>元素有一个特殊的特性：name。这个特性可以用来定义额外的插槽：
        <div class="container">
            <header>
                <slot name="header"></slot>
            </header>
            <main>
                <slot></slot>
            </main>
            <footer>
                <slot name="footer"></slot>
            </footer>
        </div>
    使用时指定插槽名的会被分发到指定的插槽中，所有为指定插槽的将会插入到唯一一个没有name特性的插槽中。
        <base-layout>
            //除了可以使用在template上之外，还可以使用在普通的元素上，如：<h1 slot="header"></h1>
            <template slot="header">
                <h1>Here might be a page title.</h1>
            </template>
            <p>A paragraph for the main content.</p>
            <p>And another one.</p>

            <template slot="footer">
                <p>footer</p>
            </template>
        </base-layout>
    最终的渲染结果都如下：
        <div class="container">
            <header>
                <h1>Here might be a page title.</h1>
            </header>
            <main>
                <p>A paragraph for the main content.</p>
                <p>And another one.</p>
            </main>
            <footer>
                <p>footer</p>
            </footer>
        </div>
3.插槽的默认内容：如果插槽的位置没有任何数据，则使用默认值在该位置进行显示
   例：
   Vue.component('my-component',{
        template:`<button><slot>Submit</slot></button>`
   });
4.编译作用域：插槽可以访问所在组件内的所有实例属性，不能访问该实例之外的属性；父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译。
5.作用域插槽
例：
    <div id="example-slot2">
        <todo-list>
            <!--slot-scope可以再任何元素上使用-->
            <div slot-scope="slotProp">
                <span v-if="slotProp.td.isComplete">✓</span>
                {{slotProp.td.text}}
            </div>
        </todo-list>
    </div>
    Vue.component('todo-list', {
        data: function () {
            return {
                todos: [
                    {text: '1', id: 1, isComplete: true},
                    {text: '2', id: 2, isComplete: true},
                    {text: '3', id: 3, isComplete: false}
                ]
            }
        },
        template: ` <ul>
                        <li v-for="todo in todos" v-bind:key="todo.id">
                            <!--slot 的 prop随意制定，使用的时候区分开即可-->
                            <slot v-bind:td="todo">
                                {{todo.text}}
                            </slot>
                        </li>
                    </ul>`
    });

    var vm = new Vue({
        el: '#example-slot2'
    });
6.解构slot-scope
如果一个JavaScript表达式在一个函数定义的参数位置有效，那么这个表达式实际上就可以被slot-scope接受。也就是说你可以在支持的环境下（单文件组件或现代浏览器），在这些表达式中使用ES6解构语法。
例：
     <todo-list>
        <div slot-scope="{ todo }">
            <span v-if="todo.isComplete">✓</span>
            {{slotProp.td.text}}
        </div>
    </todo-list>
这回事作用域插槽变得更干净一些。

动态组件和异步组件《未进行实例编写》

处理边界情况：
1.访问元素和组件：
在绝大多数情况下，最好不要触达另一个组件实例内部或手动操作DOM元素。不过也确实在一些情况下做这些事情是合适的。
    访问根实例 $root：对于demo或非常小型的有少量组件的应用来说这是很方便的，在大型应用中还是建议使用Vuex来管理应用的状态
        例：
            new Vue({
                data:{
                    foo:1
                },
                computed:{
                    bar:function(){}
                },
                methods:{
                    baz:function(){}
                }
            });
            所有的子组件都可以将这个实例作为一个全局store来访问或使用。
            this.$root.foo
            this.$root.foo = 2
            this.$root.bar
            this.$root.baz();
    访问父级组件实例 $parent慎用：和$root类似，$parent属性可以用来从一个子组件访问父组件的实例。
    依赖注入：相对以上面$parent来说可以通过父组件指定提供给子组件的数据，子组件可以获取指定的数据，使用实例属性provide来从父组件提供数据，使用实例属性inject可以再子组件中获取指定数据。
    例：
        父组件指定待注入数据：
        Vue.component('google-map',{
            provide:function(){
                return {
                    getMap:this.getMap
                }
            },
            methods:{
                getMap:function(){
                }
            }
        });
        子组件注入：
        Vue.component('google-map-marker',{
            inject:['getMap'],
            methods:{
                userInject:function(){
                    var vm = this;
                    this.getMap;
                }
            }
        });

    访问子组件实例或子元素 $refs：$refs只会在组件渲染完成之后生效，并且它们不是响应式的。这只意味着一个直接的子组件封装的“逃生舱”--你应该避免在模板或者计算属性中使用$refs。
        例：
            <div id="example-ref">
                <base-input v-bind:label="'sss'" v-model="inputValue" v-on:btn-click="btnClick" ref="usernameInput"></base-input>
            </div>
            Vue.component('base-input', {
                props: ['value', 'label'],
                template: `<label>{{label}}<input v-bind:value="value" v-on:input="$emit('input',$event.target.value)" />
                                    <button v-on:click="$emit('btn-click')"><slot>Submit</slot></button></label>`
            });

            var vm = new Vue({
                el: '#example-ref',
                data:{
                  inputValue:''
                },
                methods: {
                    btnClick: function () {
                        var label = this.$refs.usernameInput.label;
                        alert(label)
                    }
                }
            });
    程序化的事件侦听器《见文档》
2.循环引用
    递归组件：组件是可以在他们自己的模板中调用自身的。确保递归调用是条件性的（例如使用一个最终会得到的false的v-if）。
    组件之间的循环引用：有两个组件A和B，A中使用了B，B中使用了A，如使用全局注册则没有问题，但是如果使用webpack等进行注册时需要注意详情见《文档》。
3.模板定义的替代品(不建议使用，或者是针对模板比较大的demo或者极小型的应用)
    内联模板：使用inline-template在组件中做标记，其元素中间内容作为组件模板。
    例：
         <base-template inline-template>
            <input >//此处会作为base-template组件的模板存在
         </base-template>
    不过，inline-template会让你模板的作用域变得更加难以理解。所以作为最佳实践，请在组件内优先使用template选项或.vue文件里的一个<template>元素来定义模板。
    X-Templates:此为替代模板的另一种办法，在<script>元素中，并为其带上text/x-template的类型，然后通过一个id将模板引用过去。
    例：
        <script type='text/x-template' id='hello-x-template'>
        </script>
        Vue.component('',{
            template:'#hello-x-template'
        });
4.控制更新
    强制更新：需要手动强制更新时，可以通过$forceUpdate来做这件事。
    通过v-once使用在模板中的静态块中，则静态部分只会加载一次。
    例：
        Vue.component('terms-of-service',{
            template:`<div v-once></div>`
        });
        此<div>中内容在渲染时只会渲染一遍。

状态管理模式：
1.每一个Vuex应用的核心就是store，包含着应用中的大部分状态。
    Vuex是响应式的。
    不能直接改变store中的状态，改变store中的状态的唯一途径就是显示的提交mutation。
    例：
        const store = new Vuex.Store({
            state:{
                count:0
            },
            mutations(变化):{
                increment:function(state){
                    state.count++;
                }
            }
        });

        store.commit('increment');
        console.log(store.state.count);
2.state:
    在跟根实例中注册，然后在子组件中使用：
        例：
            const Counter = {
                template:`<div>{{count}}</div>`,
                computed:{
                    count:function(){
                        return this.$store.state.count;
                    }
                }
            };
            const app = new  Vue({
                el:'#app',
                store:store,
                components:{Counter},
                template:`<div class='app'><Counter></Counter></div>`
            });
    mapState辅助函数用来将store中的许多参数简单的生成计算属性。https://vuex.vuejs.org/zh/guide/state.html
    组件的局部状态：不应该盲目的使用Vuex，如果某个状态单属于一个组件，则应该放到组件中。
3.Getter:
    Vuex允许我们在store中定义’getter‘来方便各个组件调用store中的属性，getter相当于store中的计算属性。
    通过store属性访问:
        在外会被暴露为store.getters，此时是作为Vue的响应式系统的一部分缓存其中的。
        例1：
            getters:{
                //接收该store的state作为第一个参数
                doneTodos:state=>{
                    return state.todos.filter(todo=>todo.done);
                }
            }
            todos:function(){
               return this.$store.getters.doneTodos;
            }
        例2：
            //接收所有getters作为第二个参数
            doCount:(state,getters)=>{
                return getters.doneTodos.length;
            }
    通过方法访问：此时每次调用都会去调用定义的方法，不会进行缓存
        可以给getter返回一个参数，这样可以通过调用方法来再store中进行查询
            例：
                methodTodos:state=>(id)=>{
                    return state.todos.filter(todo=>todo.id===id);
                }
    mapGetters辅助函数：将store中的getters作为计算属性添加到组建中，https://vuex.vuejs.org/zh/guide/getters.html
        例：
            const map = Vuex.mapGetters;
            const Counter = {
                template:`<div>{{doCount}}</div>`,
                computed:{
                    ...map(['doCount'])
                }
            };
4.Mutation:
    用来改变store的唯一方法就是提交mutation，提交mutation应当使用store.commit('mutation回调类型即函数名')。
        例：
             mutations:{
                //接收state作为第一个参数
                increment:function(state){
                    state.count++;
                }
             }
             store.commit('increment');
    提交载荷：即提交的时候添加参数，供mutation使用，一般来说提交载荷为一个对象，可以容纳多个值，使用时比较方便。
        例1：
            mutations:{
                increment:function(state,n){
                    state.count= state.count+n;
                }
            }
            store.commit('increment',10);//store.state.count=10
        例2：
             mutations:{
                increment2:function(state,obj){
                    state.count = state.count+obj.count;
                }
            }
            store.commit('increment2',{count:11});//store.state.count = 11
    对象风格的提交方式：调用store.commit的时候可以传一个带有type属性的对象，这个时候，整个对象都会被作为载荷传给mutation事件中。type指的是mutation的类别及函数名.
        例：
            store.commit({
                type: 'increment2',
                count: 21
            });
            调用increment2，结果为store.count=21

    mutation应该遵守的Vue响应规则：
        1.最好提前初始化好store.state中所需的属性。
        2.如果需要在对象上添加属性的时候，应该使用以下方法：
            Vue.set(state.obj,'newProp','123');
            state.obj = {...state.obj,newProp:123}
    使用常量替代 Mutation 事件类型:使用常量名代替字符串表示事件名称：https://vuex.vuejs.org/zh/guide/mutations.html
    Mutation必须是同步函数：为了追踪数据，Mutation必须作为同步函数存在，不能存有异步函数调用。
    在组件内调用mutation：
        使用this.$store.commit(xxx);
        使用辅助函数Vuex.mapMutations:
            例：
                methods: {
                    ...Vuex.mapMutations([
                        'increment2'
                    ])
                }
                template: `<div>{{count}}<button @click="increment2(data)">Submit</button></div>`
5.Action:
    Action类似于mutation，不同在于：
        Action提交的是mutation，而不是直接变更状态。
            例：
                actions:{
                    increment:function(context){
                        context.commit('increment',10);
                        console.log('action'+context.state.count);
                    },
                    increment2({ commit,state }){
                        commit('increment',10);
                        console.log('action2'+state.count);
                    }
                }
                //action的触发方法。
                store.dispatch('increment');
        Action可以允许任何异步操作。
            例：
                increment3({commit,state}){
                        setTimeout(()=>{
                            commit('increment',10);
                            console.log('action3:'+state.count);
                        },'3000')
                    }
                }
                store.dispatch('increment3');
        在组建中分发action：this.$store.dispatch(xxx)。https://vuex.vuejs.org/zh/guide/actions.html
        辅助函数mapActions：将actions作为组件的methods存在。https://vuex.vuejs.org/zh/guide/actions.html
        组合Action：
            即一个action处理完成之后接着处理另一个：
             increment4({commit,state}){
                return new Promise((resolve,reject)=>{
                    setTimeout(function(){
                        commit('increment',10);
                        console.log('action4:'+state.count);
                        resolve();//对应.then后里面第一个success回调参数
                    },3000);
                })
            }
            store.dispatch('increment4').then(()=>{
                console.log('increment4 end');
            });
6.Module：如果应用庞大，状态繁多，可以通过分模块管理
    例：
        const modelA = {
            state: {
                count: 1
            },
            getters:{
                doGettersCount:function(state,getters,rootState){//...}
            }
            actions: {
                //带root的表示根节点的元素，不带的表示该模块的局部状态
                increment5({commit,state,rootState}){
                    console.log('increment5:'+state.count+'  '+rootState.count);
                }
            }
        };
        const modelB = {
            state: {
                count: 2
            }
        };
        const store = new Vuex.Store({
            //根节点中的元素可以通过rootState或rootGetters来访问
            state: {count: 0},
            modules: {
                a: modelA,
                b: modelB
            }
        });
7.表单处理：
    关于表单使用v-model进行双向绑定的情况：由于只能通过mutation来进行修改state的值。
    例1：
        const Counter = {
            data: function () {
                return {data: {count: 22}, stateCount: this.$store.state.count}

            }, template: `<div><input type="number" v-bind:value="stateCount" @input="inputChange"><button @click="increment2(data)">Submit</button></div>`,
            methods: {
                ...Vuex.mapMutations([
                    'increment2'
                ]),inputChange:function(event){
                    this.$store.commit('inputMutation',event.target.value);
                }
            }
        };
    采用双向绑定的计算属性来将表单input双向绑定至state：
        例：
            const store = new Vuex.Store({
                state: {countRoot: 0,message:'a'},
                getters: {
                    doCountRoot: function (state) {
                        return state.countRoot;
                    },getMessage:function(state){
                        return state.message;
                    }
                },
                modules: {
                    a: modelA,
                    b: modelB
                },
                mutations:{
                    updateMessage:function(state,value){
                        state.message = value;
                    }
                }
            });
            message:{
                get(){
                    return this.$store.getters.getMessage;
                },
                set(value){
                    this.$store.commit('updateMessage',value);
                }
            }
